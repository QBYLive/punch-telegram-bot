import logging
import requests
import asyncio
import os

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler

# ==== –ö–æ–Ω—Ñ—ñ–≥ ====
BOT_TOKEN = os.getenv("BOT_TOKEN") or "7641013721:AAFmK69lAfZDDZGvEqPT3xPn0dblhBl9eZ4"
CHAT_ID = int(os.getenv("CHAT_ID") or 7650968562)  # –¶–µ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –≥—Ä—É–ø–∏
API_KEY = os.getenv("API_KEY") or "qRptHWNir0haRqH5o3sVVe2XrOqtqi"
BALANCE_URL = f"https://daisysms.com/stubs/handler_api.php?api_key={API_KEY}&action=getBalance"

logging.basicConfig(level=logging.INFO)

# ==== –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É ====
def get_balance():
    try:
        response = requests.get(BALANCE_URL)
        if "ACCESS_BALANCE" in response.text:
            balance = response.text.split(":")[1]
            return f"üí∞ –ë–∞–ª–∞–Ω—Å –∞–∫–∞—É–Ω—Ç—É: {balance}$"
        else:
            return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å. –ü–µ—Ä–µ–≤—ñ—Ä API –∫–ª—é—á."
    except Exception as e:
        return f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {e}"

# ==== –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ ====
async def auto_ping_balance(app):
    message = get_balance()
    try:
        await app.bot.send_message(chat_id=CHAT_ID, text=f"üìÖ –°–∞–º–µ —á–∞—Å –ø–æ–∫–∞–∑–∞—Ç–∏ –±–∞–ª–∞–Ω—Å üêßü´¢\n{message}")
        logging.info("[‚úî] –ê–≤—Ç–æ–ø—ñ–Ω–≥: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except Exception as e:
        logging.error(f"[‚úñ] –ê–≤—Ç–æ–ø—ñ–Ω–≥: –ø–æ–º–∏–ª–∫–∞ ‚Äî {e}")

# ==== /balance –∫–æ–º–∞–Ω–¥–∞ ====
async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = get_balance()
    await update.message.reply_text(message)

# ==== /ping –∫–æ–º–∞–Ω–¥–∞ ====
async def ping_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = get_balance()
    try:
        await context.bot.send_message(chat_id=CHAT_ID, text=f"üîî –†—É—á–Ω–∏–π –ø—ñ–Ω–≥ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ\n{message}")
        await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
        logging.info("[‚úî] –†—É—á–Ω–∏–π –ø—ñ–Ω–≥: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ: {e}")
        logging.error(f"[‚úñ] –†—É—á–Ω–∏–π –ø—ñ–Ω–≥: –ø–æ–º–∏–ª–∫–∞ ‚Äî {e}")

# ==== –ì–æ–ª–æ–≤–Ω–∞ ====
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("balance", balance_command))
    app.add_handler(CommandHandler("ping", ping_command))

    scheduler = BackgroundScheduler(timezone="Europe/Kiev")
    scheduler.add_job(lambda: asyncio.run(auto_ping_balance(app)), trigger='cron', hour=10, minute=0)
    scheduler.start()

    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥...")
    app.run_polling()

if __name__ == "__main__":
    main()
